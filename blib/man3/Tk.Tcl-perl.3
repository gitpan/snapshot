.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH TCL-PERL 1 "Tk402.001" "18/Mar/97" "perl/Tk Documentation"
.IX Title "TCL-PERL 1"
.UC
.IX Name "Tcl vs perl - very old suspect documentation on porting."
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
Tcl vs perl \- very old suspect documentation on porting.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This isn't really a .pod yet, nor is it Tcl vs perl
it is a copy of John's comparison of Malcolm's original perl/Tk
port with the current one. It is also out-of-date in places.
.PP
.Vb 197
\&  From: john@WPI.EDU (John Stoffel )
\&  
\&  Here are some thoughts on the new Tk extension and how I think the
\&  organization of the commands looks.  Mostly, I'm happy with it, it
\&  makes some things more organized and more consistent with tcl/tk, but
\&  since the overlying language is so different, I don't think we need to
\&  follow exactly the tcl/tk model for how to call the language.
\&  
\&  The basic structure of the Tk program is:
\&  
\&  
\&      require Tk;
\&  
\&      $top = MainWindow->new();
\&  
\&      #
\&      # create widgets
\&      #
\&  
\&      Tk::MainLoop;
\&  
\&      sub method1 {
\&      }
\&  
\&      sub methodN {
\&      }
\&  
\&  
\&  This is pretty much the same as tkperl5a5, with some cosmetic naming
\&  changes, and some more useful command name and usage changes.  A quick
\&  comparison in no particular order follows:
\&  
\&  
\&  tkperl5a5                             Tk
\&  -------------------------------       -----------------------------------
\&  $top=tkinit(name,display,sync);       $top=MainWindow->new();
\&  
\&  tkpack $w, ... ;              $w->pack(...)
\&  
\&  $w = Class::new($top, ...);   $w = $top->Class(...);
\&  
\&  tkmainloop;                   Tk::MainLoop;
\&  
\&  tkbind($w,"<key>",sub);               $w->bind("<key>",sub);
\&  
\&  tkdelete($w, ...);            $w->delete(...);
\&  
\&  $w->scanmark(...);            $w->scan("mark", ...);
\&  
\&  $w->scandragto(...);          $w->scan("dragto", ...);
\&  
\&  $w->tkselect();                       $w->Select();
\&  
\&  $w->selectadjust(...);                $w->selection("adjust", ...);
\&  
\&  $w->selectto(...);            $w->selection("to", ...);
\&  
\&  $w->selectfrom(...);          $w->selection("from", ...);
\&  
\&  $w->tkindex(...);             $w->index(...);
\&  
\&  tclcmd("xxx",...);              &Tk::xxx(...)    # all Tk commands, but no Tcl at all
\&  
\&  tclcmd("winfo", xxx, $w, ...);  $w->xxx(...);
\&  
\&                                $w->mark(...);
\&  
\&                                $w->tag(...);
\&  
\&  $w->grabstatus();             $w->grab("status");
\&  
\&  $w->grabrelease(...);         $w->grab("release", ...);
\&  
\&  focus($w);                    $w->focus;
\&  
\&  update();                     Tk->update();
\&  
\&  idletasks();                  Tk->update("idletasks");
\&  
\&  wm("cmd",$w, ...);            $w->cmd(...);
\&                                
\&  destroy($w);                  $w->destroy();
\&  
\&                                Tk::option(...);
\&                                  $w->OptionGet(name,Class)
\&  
\&                                $w->place(...)
\&  
\&                                Tk::property(...);
\&  
\&  
\&  $w = Entry::new($parent,...)
\&  
\&  is now
\&  
\&  $w = $parent->Entry(...)
\&  
\&  As this allows new to be inherited from a Window class.
\&  
\&    -method=>x,-slave=>y   
\&  
\&   is now
\&  
\&    -command => [x,y]
\&  
\&  1st element of list is treated as "method" if y is an object reference.
\&  (You can have -command => [a,b,c,d,e] too; b..e get passed as args).
\&  
\&  Object references are now hashes rather than scalars and there
\&  is only ever one such per window.  The Tcl_CmdInfo and PathName
\&  are entries in the hash.
\&  
\&  (This allows derived classes to 
\&  re-bless the hash and keep their on stuff in it too.)
\&  
\&  Tk's "Tcl_Interp" is in fact a ref to "." window. 
\&  You can find all the Tk windows descended from it as their object 
\&  references get added (by PathName) into this hash. 
\&  $w->MainWindow returns this hash from any window.
\&  
\&  I think that it should extend to multiple tkinits / Tk->news  
\&  with different Display's - if Tk code does.
\&  
\&  Finally "bind" passes window as "extra" (or only)
\&  argument. Thus
\&  
\&  Tk::Button->bind(<Any-Enter>,"Enter");
\&  
\&  Binds Enter events to Tk::Button::Enter by default
\&  but gets called as $w->Enter so derived class of Button can just 
\&  define its own Enter method. &EvWref and associated globals and race
\&  conditions are no longer needed.
\&  
\&  
\&  One thing to beware of : commands bound to events with $widget->bind
\&  follow same pattern, but get passed extra args :
\&  
\&  $widget->bind(<Any-1>,[sub {print shift}, $one, $two ]);
\&  
\&  When sub gets called it has :
\&  
\&     $widget $one $two 
\&  
\&  passed.
\&  
\&  1st extra arg is reference to the per-widget hash that serves as the 
\&  perl object for the widget. 
\&  
\&  Every time an XEvent a reference to a special class is placed
\&  in the widget hash. It can be retrieved by $w->XEvent method.
\&  
\&  The methods of the XEvent class are the 
\&  Tcl/Tk % special characters.
\&  
\&  Thus:
\&  
\&  $widget->bind(<Any-KeyPress>,
\&                sub {
\&                 my $w = shift;
\&                 my $e = $w->XEvent;
\&                 print $w->PathName," ",$e->A," pressed ,$e->xy,"\en");
\&                });
\&  
\&  XEvent->xy is a special case which returns "@" . $e->x . "," . $e->y
\&  which is common in Text package.
\&  
\&  Because of passing a blessed widget hash to "bound" subs they can be 
\&  bound to (possibly inherited) methods of the widget's class:
\&  
\&  Class->bind(<Any-Down>,Down);
\&  
\&  sub Class::Down
\&  {
\&   my $w = shift;
\&   # handle down arrow 
\&  } 
\&  
\&  
\&  Also:
\&  
\&  -command and friends can take a list the 1st element can be a ref to 
\&  as sub or a method name. Remaining elements are passed as args to the 
\&  sub at "invoke" time. Thus :
\&  
\&  $b= $w->Button(blah blah, '-command' => [sub{print shift} , $fred ]);
\&  
\&  Should do the trick, provided $fred is defined at time of button creation.
\&  
\&  Thus 1st element of list is equivalent to Malcolm's -method and second 
\&  would be his -slave.  Any further elements are a bonus and avoid
\&  having to pass ref to an array/hash as a slave.
\&  
\&  
\&  
\&  
\&  
\&  
.Ve

.rn }` ''
